// Code generated by "stringer -type=OptionCode,MessageType,DataType,NACKResponseCode,NetType"; DO NOT EDIT

package npmp

import "fmt"

const (
	_OptionCode_name_0 = "PadServerIPIperfServerAddressIperfServerPortIperfServerVersionJobResourceDeadlineProtocolVersionClientSoftwareVersionClientSoftwareRepoJobSpecVendorOptionsHeartbeatDuration"
	_OptionCode_name_1 = "OpEnd"
)

var (
	_OptionCode_index_0 = [...]uint8{0, 3, 11, 29, 44, 62, 81, 96, 117, 135, 142, 155, 172}
	_OptionCode_index_1 = [...]uint8{0, 5}
)

func (i OptionCode) String() string {
	switch {
	case 0 <= i && i <= 11:
		return _OptionCode_name_0[_OptionCode_index_0[i]:_OptionCode_index_0[i+1]]
	case i == 255:
		return _OptionCode_name_1
	default:
		return fmt.Sprintf("OptionCode(%d)", i)
	}
}

const _MessageType_name = "NullRegisterDisconnectStartEndDataInformVersionACKNAKSettings"

var _MessageType_index = [...]uint8{0, 4, 12, 22, 27, 30, 34, 40, 47, 50, 53, 61}

func (i MessageType) String() string {
	if i >= MessageType(len(_MessageType_index)-1) {
		return fmt.Sprintf("MessageType(%d)", i)
	}
	return _MessageType_name[_MessageType_index[i]:_MessageType_index[i+1]]
}

const _DataType_name = "PingIperf2Iperf3"

var _DataType_index = [...]uint8{0, 4, 10, 16}

func (i DataType) String() string {
	if i >= DataType(len(_DataType_index)-1) {
		return fmt.Sprintf("DataType(%d)", i)
	}
	return _DataType_name[_DataType_index[i]:_DataType_index[i+1]]
}

const _NACKResponseCode_name = "GeneralErrorNotAuthorizedUnsupportedVersionNoPortsAvailableInvalidData"

var _NACKResponseCode_index = [...]uint8{0, 12, 25, 43, 59, 70}

func (i NACKResponseCode) String() string {
	if i >= NACKResponseCode(len(_NACKResponseCode_index)-1) {
		return fmt.Sprintf("NACKResponseCode(%d)", i)
	}
	return _NACKResponseCode_name[_NACKResponseCode_index[i]:_NACKResponseCode_index[i+1]]
}

const _NetType_name = "WiredEthernetWirelessEthernet"

var _NetType_index = [...]uint8{0, 13, 29}

func (i NetType) String() string {
	if i >= NetType(len(_NetType_index)-1) {
		return fmt.Sprintf("NetType(%d)", i)
	}
	return _NetType_name[_NetType_index[i]:_NetType_index[i+1]]
}
